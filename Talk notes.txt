Slide 1
- If you're like me and you program in both R and Python, the R reticulate package may be one of the handiest packages to come along in some time
- You've been able to, and I've been running python from R for some time now through code chunks in R markdown documents, where
you simply add the knitr parameter engine='python' at top of a code chunk and provide a path to your python executable, and that works to create a reproducible document
using both languages. And you can actually run a number of of different languages using the knitr engine parameter in RMarkdown, but code chunks are run as separate stand-alone sessions this way and you can only share objects between chunks as side effects by writing to files.  But as you'll see in this overview reticulate adds lots of functionality and allows really powerful integration of R and Python

Slide 2
- reticulate uses a Python engine for RMarkdown that lets you run Python chunks in a single Python session within your R session and you can share objects
  between R and Python and vice versa
- I'm going to move into an R notebook and just do some live demos of the main features and approaches to using reticulate


Chunk 1 & 2
- To get started, load the reticulate library, and in an RMarkdown document or notebook, create a Python chunk, write your Python code, and run the code chunk
- Just as with r code chunks in RMarkdown, you get shared variables and state between Python chunks

Chunk 3
- We can directly import Python modules in R and access module functions and data via the '$' operator, for example to use Python os module to list directories